// <auto-generated />
using BoredBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoredBackend.Migrations
{
    [DbContext(typeof(BoredDbContext))]
    [Migration("20240201185913_AddStaging")]
    partial class AddStaging
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoredBackend.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Accessibility")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Activities", "Bored");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessibility = 0.35m,
                            ExternalKey = "9072906",
                            Link = "",
                            Name = "Go to a karaoke bar with some friends",
                            Participants = 4,
                            Price = 0.5m,
                            Type = "social"
                        },
                        new
                        {
                            Id = 2,
                            Accessibility = 0.4m,
                            ExternalKey = "1093640",
                            Link = "",
                            Name = "Play a game of tennis with a friend",
                            Participants = 2,
                            Price = 0.1m,
                            Type = "social"
                        },
                        new
                        {
                            Id = 3,
                            Accessibility = 0.5m,
                            ExternalKey = "1382389",
                            Link = "",
                            Name = "Volunteer at a local animal shelter",
                            Participants = 1,
                            Price = 0.1m,
                            Type = "charity"
                        });
                });

            modelBuilder.Entity("BoredBackend.Models.ActivityStaging", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("Accessibility")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Key");

                    b.ToTable("ActivityStaging", "Bored");
                });

            modelBuilder.Entity("BoredBackend.Models.Offer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("BuyUrl")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Offers", "Bored");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityId = 1,
                            BuyUrl = "https://www.karaokebar.com",
                            IsActive = true,
                            Name = "Karaoke Bar"
                        },
                        new
                        {
                            Id = 2L,
                            ActivityId = 1,
                            BuyUrl = "https://www.karaokebar2.com",
                            IsActive = true,
                            Name = "Karaoke Bar 2"
                        },
                        new
                        {
                            Id = 3L,
                            ActivityId = 2,
                            BuyUrl = "https://www.tennisclub.com",
                            IsActive = true,
                            Name = "Tennis Club"
                        },
                        new
                        {
                            Id = 4L,
                            ActivityId = 2,
                            BuyUrl = "https://www.tennisclub2.com",
                            IsActive = true,
                            Name = "Tennis Club 2"
                        },
                        new
                        {
                            Id = 5L,
                            ActivityId = 3,
                            BuyUrl = "https://www.animalshelter.com",
                            IsActive = true,
                            Name = "Animal Shelter"
                        },
                        new
                        {
                            Id = 6L,
                            ActivityId = 3,
                            BuyUrl = "https://www.animalshelter2.com",
                            IsActive = true,
                            Name = "Animal Shelter 2"
                        });
                });

            modelBuilder.Entity("BoredBackend.Models.Offer", b =>
                {
                    b.HasOne("BoredBackend.Models.Activity", "Activity")
                        .WithMany("Offers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("BoredBackend.Models.Activity", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
